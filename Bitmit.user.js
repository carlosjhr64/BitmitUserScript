// Generated by CoffeeScript 1.4.0
var UKPKG, auction_price, base_pkg, base_prices, check_for_note, check_for_pkg, check_for_submit, check_for_variables, delivery_price, edit_form, modify_n, modify_t, my_close, my_open, o, open_pages, price_format, run, us_price, usps, ww_price;

UKPKG = [6.55, 6.55, 6.55, 9.45, 9.45, 12.75, 12.75, 12.75, 12.75, 14.90, 14.90, 14.90, 14.90, 16.75, 16.75, 16.75, 16.75, 18.60, 18.60, 18.60, 18.60, 20.45, 20.45, 20.45, 20.45, 22.30, 22.30, 22.30, 22.30, 24.15, 24.15, 24.15, 24.15, 26.00, 26.00, 26.00, 26.00, 27.85, 27.85, 27.85, 27.85, 29.70, 29.70, 29.70, 29.70, 31.55, 31.55, 31.55, 31.55, 33.40];

usps = function(type, oz) {
  var n, p1, p2;
  switch (type) {
    case 'ltt':
      if (oz <= 1) {
        return 0.45;
      }
      if (oz <= 2) {
        return 0.65;
      }
      if (oz <= 3.5) {
        return 0.85;
      }
      return usps('flt', oz);
    case 'flt':
      n = (oz - 1).toFixed(0);
      if (oz < 13) {
        return 0.90 + n * 0.20;
      }
      return usps('pkg', oz);
    case 'pkg':
      n = (oz - 3).toFixed(0);
      if (n < 0) {
        n = 0;
      }
      return 1.95 + n * 0.17;
    case 'mda':
      p1 = usps('pkg', oz);
      n = (oz / 16).toFixed(0);
      p2 = [2.38, 2.77, 3.16, 3.55, 3.94, 4.47, 4.99][n];
      if (!p2) {
        p2 = 4.99 + (n - 7) * 0.40;
      }
      if (p1 < p2) {
        return p1;
      }
      return p2;
    case 'ukpkg':
      n = oz.toFixed(0);
      if (n < 50) {
        return UKPKG[n];
      }
      return UKPKG[49] + 0.4625 * (n - 49);
  }
};

o = {
  exp_date_value: '03/17/13 12:00',
  b2d: 32.29,
  us: 0.961,
  ww: 0.854,
  auto: true,
  codex: /\[\w+\|\d+\/\d+\]/,
  submit: null,
  note: null,
  price: null,
  delivery1: null,
  delivery2: null,
  exp_date: null,
  item_page: "https://www.bitmit.net/en/item/",
  sell_page: "https://www.bitmit.net/en/cp/se",
  interval: null,
  count: null,
  target: null,
  packages: {
    CD: true,
    MG: true,
    PB: true,
    BK: true,
    HH: true,
    PK: true,
    PKG: true,
    pkg: true,
    mda: true
  },
  pkg: null,
  timeout: 5000
};

my_open = function(url, id) {
  window.focus();
  console.log("Trying to open new window " + id + ".");
  return o.target = window.open(url, id);
};

my_close = function() {
  var window_close;
  if (o.auto) {
    console.log("Trying to close window.");
    if (o.interval != null) {
      clearInterval(o.interval);
    }
    window_close = function() {
      return window.close();
    };
    return setTimeout(window_close, o.timeout);
  }
};

price_format = function(p) {
  return p.toFixed(3);
};

base_pkg = function() {
  return (o.note.match(o.codex))[0].match(/\w+/)[0];
};

base_prices = function() {
  var oz, prices, uk, us;
  prices = (o.note.match(o.codex))[0].match(/\d+/g);
  if (base_pkg() === 'pkg') {
    oz = parseFloat(prices[0]);
    us = usps('pkg', oz);
    uk = usps('ukpkg', oz);
    prices = [us, uk];
  } else if (base_pkg() === 'mda') {
    oz = parseFloat(prices[0]);
    us = usps('mda', oz);
    uk = usps('ukpkg', oz);
    prices = [us, uk];
  } else {
    prices = prices.map(function(p) {
      return parseFloat(p) / 100.0;
    });
  }
  return prices;
};

us_price = function() {
  return base_prices()[0];
};

ww_price = function() {
  return base_prices()[1];
};

auction_price = function() {
  var us;
  us = us_price();
  us /= o.us;
  us /= o.b2d;
  console.log("auction start price=" + us);
  return us;
};

delivery_price = function(country) {
  var delivery;
  delivery = null;
  switch (country) {
    case "US":
      delivery = 0.0;
      break;
    default:
      delivery = ww_price();
      delivery /= o.ww;
      delivery /= o.b2d;
      delivery -= auction_price();
  }
  console.log("" + country + " delivery=" + delivery);
  return delivery;
};

modify_n = function(s, n) {
  n = price_format(n);
  if (parseFloat(s.value) === parseFloat(n)) {
    return 0.;
  }
  s.value = n;
  return 1;
};

modify_t = function(s, t) {
  if (s.value === t) {
    return 0.;
  }
  s.value = t;
  return 1;
};

edit_form = function() {
  var clickit, edits;
  edits = 0;
  edits += modify_n(o.price, auction_price());
  edits += modify_n(o.delivery1, delivery_price(document.getElementById("delivery1_country").value));
  edits += modify_n(o.delivery2, delivery_price(document.getElementById("delivery2_country").value));
  edits += modify_t(o.exp_date, o.exp_date_value);
  if (edits > 0) {
    console.log("There were " + edits + " edits.");
    if (o.auto) {
      clickit = function() {
        return o.submit.click();
      };
      return setTimeout(clickit, o.timeout);
    }
  } else {
    console.log("There were no edits.");
    return my_close();
  }
};

check_for_variables = function() {
  var go;
  go = false;
  o.price = document.getElementById("price_auction");
  if (o.price.value != null) {
    o.delivery1 = document.getElementById("delivery1_price");
    o.delivery2 = document.getElementById("delivery2_price");
    o.exp_date = document.getElementById("itemDurationEndtimeCalendar");
    if ((o.delivery1 != null) && (o.delivery2 != null) && (o.exp_date != null)) {
      go = true;
    }
  }
  if (go) {
    return edit_form();
  } else {
    return alert("Missing form variables.");
  }
};

check_for_pkg = function() {
  var pkg;
  pkg = base_pkg();
  if (o.packages[pkg]) {
    o.pkg = pkg;
    return check_for_variables();
  } else {
    return alert("Unknown type " + pkg + ".");
  }
};

check_for_note = function() {
  var go, _ref;
  go = false;
  o.note = (_ref = document.getElementById("txtareaInternalNote")) != null ? _ref.innerHTML : void 0;
  if (o.note != null ? o.codex.test(o.note) : void 0) {
    go = true;
  }
  if (go) {
    return check_for_pkg();
  } else {
    return alert("Internal note code missing.");
  }
};

open_pages = function(list) {
  var id;
  id = list[o.count];
  if (id == null) {
    return clearInterval(o.interval);
  } else {
    if (!(o.target != null) || o.target.closed) {
      id = id.match(/\d+/)[0];
      o.count += 1;
      return my_open("https://www.bitmit.net/en/cp/sell/edit/" + id, id);
    }
  }
};

check_for_submit = function() {
  var list, open_pages_list;
  o.submit = document.getElementById("formItemSellSubmit");
  if (o.submit) {
    clearInterval(o.interval);
    return check_for_note();
  } else {
    if (document.getElementById("active").className === "active") {
      list = document.getElementById("content");
      if (list) {
        list = list.innerHTML.match(/>\d+</g);
        if (list && (list.length > 0)) {
          clearInterval(o.interval);
          console.log("Opening " + list.length + " pages.");
          o.count = 0;
          open_pages_list = function() {
            return open_pages(list);
          };
          return o.interval = setInterval(open_pages_list, o.timeout);
        }
      }
    }
  }
};

run = function() {
  var href;
  href = location.href;
  console.log(href);
  switch (href.substring(0, o.item_page.length)) {
    case o.item_page:
      console.log("Closing...");
      return my_close();
    case o.sell_page:
      console.log("Checking...");
      return o.interval = setInterval(check_for_submit, o.timeout);
    default:
      return console.log("Nothing to do.");
  }
};

run();
